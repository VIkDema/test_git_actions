  name: IPYNB_PARSER

  on:
    pull_request:
      branches: [ master, main ]
      types: [opened, synchronize, reopened, edited]
  env:
    ERRORS: ''
    WARNINGS: ''
    INFO: ''
    CRITICAL: ''

    IMPORT_BOTNOTIFIER: |
      class BotNotifier:
        def __init__(self, github_env_path, prev_errors, prev_warnings, prev_info_pr):
          self.runner = open(github_env_path,'a')
          self.new_line = '\\\\n'
          self.errors_ = self.new_line.join(prev_errors.split('\n'))
          self.info_pr_ = self.new_line.join(prev_info_pr.split('\n'))
          self.warnings_ = self.new_line.join(prev_warnings.split('\n'))
          self.critical_ = ''
        def set_env_and_close_runner(self):
          self.runner.write(self.form_instuction('ERRORS',self.errors_))
          self.runner.write(self.form_instuction('WARNINGS',self.warnings_))
          self.runner.write(self.form_instuction('INFO',self.info_pr_))
          self.runner.write(self.form_instuction('CRITICAL',self.critical_))
          self.runner.close()
        def info(self,message):
          self.info_pr_+=message+self.new_line
        def error(self, message):
          self.errors_+=message+self.new_line
        def warning(self, message):
          self.warnings_+=message+self.new_line
        def critical(self, message):
          self.critical_+=message+self.new_line
        def form_instuction(self, env_name, value):
          if not value:
            return ''
          return env_name+'='+value+'\n'
  jobs:
    check_ipynb:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-python@v3
          with:
            python-version: '3.9'
        - name: Установка библиотек
          run: |
            python -m pip install --upgrade pip
            pip install pytz
        - name: Имя PR
          run: echo ${{github.event.pull_request.title}}
        - name: Формирование пути до файла по PR и проверка, что файл существует
          id: check_path
          run: |
            python3 << END
            import os.path
            import re
            ${{env.IMPORT_BOTNOTIFIER}}
            notifier = BotNotifier('$GITHUB_ENV','${{env.ERRORS}}','${{env.WARNINGS}}','${{env.INFO}}')
            pr_name =  '${{github.event.pull_request.title}}'
            items = pr_name.split('_')
            items[1:3] = ['_'.join(items[1:3])]
            lab_num = items[-1]
            path = '/'.join(items)+'.ipynb' 
    
            if not re.match(r'^\d{4}_[a-zA-Z]+_[a-zA-Z]+_(lab|task)\d{1,2}$', pr_name):
              notifier.critical('Название PR не соотвествует шаблону <Номер группы>_<Фамилия>_<Инициалы>_lab<номер лабораторной>!')
              path=''
              lab_num=''

            if path and not os.path.exists(path):
              notifier.critical('Файл не найден по шаблону <Номер группы>/<Фамилия_Инициалы>/lab<номер лабораторной>.ipynb')
              path=''
              lab_num=''

            print(f'::set-output name=path::'+path)
            print(f'::set-output name=labnum::'+lab_num)

            notifier.set_env_and_close_runner()
            END
        - name: Проверка дедлайнов
          if: ${{ env.CRITICAL  == ''}}
          id: checkdeadline
          run: |
            python3 << END
            from datetime import datetime
            import pytz
            import json
            ${{env.IMPORT_BOTNOTIFIER}}
            notifier = BotNotifier('$GITHUB_ENV','${{env.ERRORS}}','${{env.WARNINGS}}','${{env.INFO}}')
            labnum = '${{steps.check_path.outputs.labnum}}'
            try:
              f = open("deadline.json", encoding='utf-8')
              deadlines = json.load(f)
              f.close()
              dl = deadlines[labnum]
              date_time_str = '${{github.event.pull_request.created_at}}'
              timezone = pytz.timezone("Europe/Moscow")
              date_time_obj = datetime.strptime(date_time_str, "%Y-%m-%dT%H:%M:%SZ").astimezone(timezone)
              print('test1')
              creation_date = str(date_time_obj.date())
              creation_time = str(date_time_obj.time())
              print('test2')
              if creation_date <= dl:
                notifier.info('Работа загружена: '+creation_date+' '+creation_time)
              else:
                notifier.info('Вы опоздали. Работа загружена: '+creation_date+' '+creation_time)
              notifier.info('Дедлайн: '+dl)
            except KeyError:
              notifier.warning('Отсутствует дедлайн для данной лабораторной работы')
            except FileNotFoundError:
              print("No such file or directory: '{}'".format(filename))
              notifier.warning('Не удалось найти файл с дедлайнами')
            notifier.set_env_and_close_runner()
            END
        - name: Проверка наличия пунктов
          if: ${{ env.CRITICAL  == ''}}
          run: |
              python3 <<END
              import json
              import re
              ${{env.IMPORT_BOTNOTIFIER}}
              notifier = BotNotifier('$GITHUB_ENV','${{env.ERRORS}}','${{env.WARNINGS}}','${{env.INFO}}')
              
              def jsonParce(data):
                  markdown = []
                  code = []
                  cells = data.get("cells")
                  for cell in cells:
                      if cell.get("cell_type") == "markdown":
                          for md in cell.get("source"):
                              markdown.append(md)
                      elif cell.get("cell_type") == "code":
                          for c in cell.get("source"):
                              code.append(c)
                  return markdown, code, data.get("metadata").get("kernelspec").get("language")
          
          
              def changePoints(markdown):
                  with open('points.txt', 'r') as f:
                      text = f.read()
                  substrings = text[0:-1].split('\n')
                  
                  print(substrings)
              
                  dict_substrings = dict.fromkeys(substrings, False)
                  
                  print(dict_substrings)
              
                  for key in dict_substrings:
                      for str in markdown:
                          re_key = r'^##\s+' + key
                          if re.search(re_key, str):
                              dict_substrings[key] = True
                              
                  if not re.match(
                          r'^#\sПрактическая\sработа\s№\s?\d+:\s([А-Яа-яA-Za-z-\d]+\s?)+(\\n)?$', markdown[0]) or not re.match(
                      r'^(В|в)ыполнила?\sстудент(ка)?\s(гр\.|группы)\s\d{4}\s[А-Я|A-Z][а-я|a-z]+\s[А-Я|A-Z][а-я|a-z]+,?\s(В|в)ариант\s?\d{1,2}\.?$',
                      markdown[2]):
                      notifier.error('Некорректное название работы ')
                  
                  if not all(dict_substrings.values()):
                      notifier.error('Отсутствуют обязательные пункты: ')
                      for key in dict_substrings:
                          if not dict_substrings[key]:
                              notifier.error('*'+key)
          
          
              def start_analyzing(path):
                  try:
                      notebook = open(path, encoding='utf-8')
                  except FileNotFoundError:
                      print("No file")
                  data = json.load(notebook)
                  notebook.close()
                  markdown, code, language = jsonParce(data)
                  notifier.info('Ядро: '+language)
                  changePoints(markdown)
          
          
              path = '${{steps.check_path.outputs.path}}'
              start_analyzing(path)
              notifier.set_env_and_close_runner()
              END
        - name: Критическая ошибка
          if: ${{ env.CRITICAL  != ''}}
          uses: andrewmusgrave/automatic-pull-request-review@0.0.2
          with:
            repo-token: '${{ secrets.GITHUB_TOKEN }}'
            event: 'REQUEST_CHANGES'
            body: |
              ## Автоматическая проверка.
              **Результат**:  Проверка не пройдена.
              **Детали**: 
              ${{env.CRITICAL}}
        - name: Все хорошо
          if: ${{ env.CRITICAL  == '' && env.ERRORS == ''}}
          uses: andrewmusgrave/automatic-pull-request-review@0.0.2
          with:
            repo-token: '${{ secrets.GITHUB_TOKEN }}'
            event: 'APPROVE'
            body: |
              ## Автоматическая проверка.
              **Результат**:  Проверка пройдена.
              **Информация о PR**: 
              ${{env.INFO}}
              **Недочеты**: 
              ${{env.WARNINGS != '' &&  env.WARNINGS || '-' }}
        - name: Есть ошибки
          if: ${{ env.CRITICAL  == '' && env.ERRORS != ''}}
          uses: andrewmusgrave/automatic-pull-request-review@0.0.2
          with:
            repo-token: '${{ secrets.GITHUB_TOKEN }}'
            event: 'REQUEST_CHANGES'
            body: |
              ## Автоматическая проверка.
              **Результат**: Проверка не пройдена.
              **Информация о PR**: 
              ${{env.INFO}}
              **Детали**: 
              ${{env.ERRORS}}
              **Недочеты**: 
              ${{env.WARNINGS != '' &&  env.WARNINGS || '-' }}
