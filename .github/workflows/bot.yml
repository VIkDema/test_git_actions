name: IPYNB_PARSER

on:
  pull_request:
    branches: [ master, main ]
    types: [opened, synchronize, reopened, edited]

jobs:
  check_ipynb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Установка библиотек
        run: |
          python -m pip install --upgrade pip
          pip install pytz
      - name: Имя PR
        run: echo ${{github.event.pull_request.title}}
      - name: Путь до файла
        id: check_path
        run: |
          python3 << END
          import os.path
          import re
          
          pr_name =  '${{github.event.pull_request.title}}'
          items = pr_name.split('_')
          lab_num = items[-1]
          path = '/'.join(items)+'.ipynb' 
   
          if not re.match(r'^\d{4}_[a-zA-Z]+_lab\d{1,2}$', pr_name):
            print(f'::set-output name=check_file::0')
            print(f'::set-output name=check_file_error::Название PR не соотвествует шаблону <Номер группы>_<ФИО>_lab<номер лабораторной>! ')
            path=''
            lab_num=''

          if path and not os.path.exists(path):
            print(f'::set-output name=check_file_error::Файл не найден по шаблону <Номер группы>/<ФИО>/lab<номер лабораторной>.ipynb' )
            path=''
            lab_num=''

          if path:
            print(f'::set-output name=check_file::1')
            print(f'::set-output name=path::'+path)
            print(f'::set-output name=labnum::'+lab_num)
          else:
            print(f'::set-output name=check_file::0')
          END
      - name: CheckDeadline
        id: checkdeadline
        run: |
          python3 << END
          from datetime import datetime
          import pytz
          import json
          
          if '${{steps.check_path.outputs.check_file}}' == '1':
            labnum = '${{steps.check_path.outputs.labnum}}'
            try:
              f = open("deadline.json", encoding='utf-8')
              deadlines = json.load(f)
              f.close()
              try:
                dl = deadlines[labnum]
                date_time_str = '${{github.event.pull_request.created_at}}'
                timezone = pytz.timezone("Europe/Moscow")
                date_time_obj = datetime.strptime(date_time_str, "%Y-%m-%dT%H:%M:%SZ").astimezone(timezone)
                creation_date = str(date_time_obj.date())
                creation_time = str(date_time_obj.time())
                if creation_date <= dl:
                  print(f'::set-output name=check_deadline::1')
                  print(f'::set-output name=check_deadline_error::'+ "Работа загружена: {0} {1}  Дедлайн: {2}".format(creation_date, creation_time, dl))
                else:
                  print(f'::set-output name=check_deadline::0')
                  print(f'::set-output name=check_deadline_error::'+ "Вы опоздали. Работа загружена: {0} {1}  Дедлайн: {2}".format(creation_date, creation_time, dl))
              except KeyError:
                print(f'::set-output name=check_deadline::0')
                print(f'::set-output name=check_deadline_error::отсутствует дедлайн для данной лабораторной работы ')
            except FileNotFoundError:
              print("No such file or directory: '{}'".format(filename))
              print(f'::set-output name=check_deadline::0')
              print(f'::set-output name=check_deadline_error::Неудалось найти файл с дедлайнами ')
          else:
            print(f'::set-output name=check_deadline::0')
          END
      - name: CheckRep
        id: changePoints
        run: |
            python3 <<END
            import json
            
            def jsonParce(data):
              markdown = []
              code = []
              cells = data.get("cells")
              for cell in cells:
                if cell.get("cell_type") == "markdown":
                  for md in cell.get("source"):
                    markdown.append(md)
                elif cell.get("cell_type") == "code":
                  for c in cell.get("source"):
                    code.append(c)
              return markdown, code, data.get("metadata").get("kernelspec").get("language")
          
            def changePoints(markdown: list) -> None:
              """
                  Function checks availability of all necessary headers.
          
                  Args:
                      markown (list): List of strings from cells in Jupyter Notebook.
          
                  Returns:
                      None
              """
              substrings: list = ["# Цель работы", "# Основные теоретические положения", "# Постановка задачи", "# Выполнение работы",
                            "# Выводы"]
              dict_substrings: dict = dict.fromkeys(substrings, False)
          
              for key in dict_substrings:
                  for str in markdown:
                      if key in str:
                          dict_substrings[key] = True
          
              for key in dict_substrings:
                  if not dict_substrings[key]:
                      print(f'::set-output name=check_rep_error::'+ "{} not found".format(key))
                      print(key + ' not found\n')
                  else:
                      print(f'::set-output name=check_rep_error::' + "{} ok".format(key))
                      print(key + ' ok\n')
          
              if all(value for value in dict_substrings.values()):
                  print(f'::set-output name=check_rep_error::Кажется, всё хорошо.')
                  print(f'::set-output name=check_report::1')
              else:
                  print(f'::set-output name=check_rep_error::Попробуй снова!')
                  print(f'::set-output name=check_report::0')

          
            def start_analyzing(path):
              try:
                notebook = open(path, encoding='utf-8')
              except FileNotFoundError:
                print("No file")
              data = json.load(notebook)
              notebook.close()
              markdown, code, language = jsonParce(data)
              print(f'::set-output name=check_rep_error::Ядро: ' + str(language))
              changePoints(markdown)
              
            path = '${{steps.check_path.outputs.path}}'
            if path:
              start_analyzing(path)
            else:
              print(f'::set-output name=check_report::0')
            END
      - name: Start comment
        uses: andrewmusgrave/automatic-pull-request-review@0.0.2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          event: ${{ steps.changePoints.outputs.check_report == 1 && steps.check_path.outputs.check_file == 1 && steps.checkdeadline.outputs.check_deadline == 1 && 'APPROVE' || 'REQUEST_CHANGES'}}
          body: "## Автоматическая проверка. \\n **Результат**: ${{ steps.changePoints.outputs.check_report == 1 && steps.check_path.outputs.check_file == 1 && steps.checkdeadline.outputs.check_deadline == 1 && 'Проверка пройдена!' || 'Проверка не пройдена.' }} \\n *Детали*: "

      - name: bot comments
        if: ${{steps.check_path.outputs.check_file == 0}}
        uses: andrewmusgrave/automatic-pull-request-review@0.0.2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          event: 'COMMENT'
          body: "${{steps.check_path.outputs.check_file_error}} \\n"

      - name: bot commentsnew
        if: ${{steps.check_path.outputs.check_file == 1}}
        uses: andrewmusgrave/automatic-pull-request-review@0.0.2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          event: 'COMMENT'
          body: "${{steps.checkdeadline.outputs.check_deadline_error}} \\n ${{steps.changePoints.outputs.check_rep_error}} "
