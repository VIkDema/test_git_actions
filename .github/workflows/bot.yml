name: IPYNB_PARSER

on:
  pull_request:
    branches: [ master, main ]
    types: [opened, synchronize, reopened, edited]
    
jobs:
  get-date-and-time:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR date and time creation
        run: |
          python3 <<END
          import time
          
          data = '${{github.event.pull_request.created_at}}'
          date = time.strptime(data, '%Y-%m-%dT%H:%M:%SZ')
          creation_date = time.strftime('%Y-%m-%d', date)
          creation_time = time.strftime('%H:%M:%S', date)
          print(f'Дата создания: {creation_date}')
          print(f'Время создания: {creation_time}')
          
          END
  check_ipynb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Имя PR
        run: echo ${{github.event.pull_request.title}}
      - name: Путь до файла
        id: check_path
        run: |
          python3 << END
          import os.path
          
          pr_name =  '${{github.event.pull_request.title}}'

          items = pr_name.split('_')
          path = '/'.join(items)+'.ipynb'
   
          if len(items) != 3 or not items[0].isdigit():
            print(f'::set-output name=check_file::0')
            print(f'::set-output name=check_file_error::Название PR не соотвествует шаблону <Номер группы>_<ФИО>_lab<номер лабораторной>! ')
            path=''

          if path and not os.path.exists(path):
            print(f'::set-output name=check_file_error::Файл не найден по шаблону <Номер группы>/<ФИО>/lab<номер лабораторной>.ipynb' )
            path=''

          if path:
            print(f'::set-output name=check_file::1')
            print(f'::set-output name=path::'+path)
          eles:
            print(f'::set-output name=check_file::0')
          END
      - name: CheckRep
        id: changePoints
        run: |
            python3 <<END
            import json
            
            def jsonParce(data):
              markdown = []
              code = []
              cells = data.get("cells")
              for cell in cells:
                if cell.get("cell_type") == "markdown":
                  for md in cell.get("source"):
                    markdown.append(md)
                elif cell.get("cell_type") == "code":
                  for c in cell.get("source"):
                    code.append(c)
              return markdown, code, data.get("metadata").get("kernelspec").get("language")
            
            def changePoints(markdown):
              substrings=["# Цель работы", "# Основные теоретические положения", "# Постановка задачи", "# Выполнение работы", "# Выводы"]
              j=0
              substr=substrings[j]
            
              for str in markdown:
                  if substr in str:
                      if j<4:
                          j=j+1
                          substr = substrings[j]
                          #print("\n",j,"\n",substr)
                      else:
                          j=j+1
              if j == 5:
                  print(f'::set-output name=check_report::1')
                  print(f'::set-output name=check_rep_error::Кажется, всё хорошо.')
              else:
                  print(f'::set-output name=check_report::0')
                  print(f'::set-output name=check_rep_error::Не найдено: ')
                  if j==0:
                      print(f'::set-output name=check_rep_error::Цель работы')
                  if j==1:
                      print(f'::set-output name=check_rep_error::Основные теоретические положения')
                  if j==2:
                      print(f'::set-output name=check_rep_error::Постановка задачи')
                  if j==3:
                      print(f'::set-output name=check_rep_error::Выполнение работы')
                  if j==4:
                      print(f'::set-output name=check_rep_error::Выводы')

            path = ${{steps.check_path.outputs.path}}
            
            print(path)
            
            if path:
              try:
                notebook = open(path, encoding='utf-8')
              except FileNotFoundError:
                print("No file")
              data = json.load(notebook)
              notebook.close()
              markdown, code, language = jsonParce(data)
              changePoints(markdown)
            END
      - name: Approve/Request changes pull request
        uses: andrewmusgrave/automatic-pull-request-review@0.0.2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          event: ${{ steps.changePoints.outputs.check_report == 1 && steps.check_path.outputs.check_file == 1 && 'APPROVE' || 'REQUEST_CHANGES' }}
          body: "## Автоматическая проверка. \\n **Результат**: ${{ steps.changePoints.outputs.check_report == 1 && 'Проверка пройдена!' || 'Проверка не пройдена.' }} \\n *Детали*: ${{ steps.check_path.outputs.check_file == 1 && steps.changePoints.outputs.check_rep_error || steps.check_path.outputs.check_file_error }}"

