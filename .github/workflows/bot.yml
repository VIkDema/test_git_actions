name: IPYNB_PARSER

on:
  pull_request:
    branches: [ master, main ]
    types: [opened, synchronize, reopened, edited]

jobs:
  get-date-and-time:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR date and time creation
        run: |
          python3 <<END
          import time
          
          data = '${{github.event.pull_request.created_at}}'
          date = time.strptime(data, '%Y-%m-%dT%H:%M:%SZ')
          creation_date = time.strftime('%Y-%m-%d', date)
          creation_time = time.strftime('%H:%M:%S', date)
          print(f'Дата создания: {creation_date}')
          print(f'Время создания: {creation_time}')
          
          END
  check_ipynb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Установка библиотек
        run: |
          python -m pip install --upgrade pip
          pip install pytz
      - name: Имя PR
        run: echo ${{github.event.pull_request.title}}
      - name: Путь до файла
        id: check_path
        run: |
          python3 << END
          import os.path
          import re
          
          pr_name =  '${{github.event.pull_request.title}}'
          items = pr_name.split('_')
          lab_num = items[-1]
          path = '/'.join(items)+'.ipynb' 
   
          if not re.match(r'^\d{4}_[a-zA-Z]+_lab\d{1,2}$', pr_name):
            print(f'::set-output name=check_file::0')
            print(f'::set-output name=check_file_error::Название PR не соотвествует шаблону <Номер группы>_<ФИО>_lab<номер лабораторной>! ')
            path=''
            lab_num=''

          if path and not os.path.exists(path):
            print(f'::set-output name=check_file_error::Файл не найден по шаблону <Номер группы>/<ФИО>/lab<номер лабораторной>.ipynb' )
            path=''
            lab_num=''

          if path:
            print(f'::set-output name=check_file::1')
            print(f'::set-output name=path::'+path)
            print(f'::set-output name=labnum::'+lab_num)
          else:
            print(f'::set-output name=check_file::0')
          END
      - name: CheckDeadline
        id: checkdeadline
        run: |
          python3 << END
          from datetime import datetime
          import pytz
          import json
          
          if '${{steps.check_path.outputs.check_file}}' == '1':
            labnum = '${{steps.check_path.outputs.labnum}}'
            try:
              f = open("deadline.json", encoding='utf-8')
              deadlines = json.load(f)
              f.close()
              try:
                dl = deadlines[labnum]
                date_time_str = '${{github.event.pull_request.created_at}}'
                timezone = pytz.timezone("Europe/Moscow")
                date_time_obj = datetime.strptime(date_time_str, "%Y-%m-%dT%H:%M:%SZ").astimezone(timezone)
                creation_date = str(date_time_obj.date())
                creation_time = str(date_time_obj.time())
                if creation_date <= dl:
                  print(f'::set-output name=check_deadline::1')
                else:
                  print(f'::set-output name=check_deadline::0')
                  print(f'::set-output name=check_deadline_error::'+ "Вы опоздали. Работа загружена: {0} {1}  Дедлайн: {2}".format(creation_date, creation_time, dl))
                  print("Вы опоздали. \\n Работа загружена: {0} {1} \\n Дедлайн: {2}".format(creation_date, creation_time, dl))
              except KeyError:
                print(f'::set-output name=check_deadline::0')
                print(f'::set-output name=check_deadline_error::отсутствует дедлайн для данной лабораторной работы ')
            except FileNotFoundError:
              print("No such file or directory: '{}'".format(filename))
              print(f'::set-output name=check_deadline::0')
              print(f'::set-output name=check_deadline_error::Неудалось найти файл с дедлайнами ')
          else:
            print(f'::set-output name=check_deadline::0')
          END
      - name: CheckRep
        id: changePoints
        run: |
            python3 <<END
            import json
            
            def jsonParce(data):
              markdown = []
              code = []
              cells = data.get("cells")
              for cell in cells:
                if cell.get("cell_type") == "markdown":
                  for md in cell.get("source"):
                    markdown.append(md)
                elif cell.get("cell_type") == "code":
                  for c in cell.get("source"):
                    code.append(c)
              return markdown, code, data.get("metadata").get("kernelspec").get("language")
            
            def changePoints(markdown):
              substrings=["Цель работы", "Основные теоретические положения", "Постановка задачи", "Выполнение работы", "Выводы"]
              j=0
              substr = substrings[j]
              is_all_found = 0
            
              for line in markdown:
                  if substr in line:
                      j+=1
                      if j == len(substrings):
                        is_all_found = 1
                        break
                      substr = "# " + substrings[j]
              print(f'::set-output name=check_report::{str(is_all_found)}')
              if is_all_found:
                  print(f'::set-output name=check_rep_error::Кажется, всё хорошо.')
              else:
                  print(f'::set-output name=check_rep_error::Не найдено: {substrings[j]}')
            def start_analyzing(path):
              try:
                notebook = open(path, encoding='utf-8')
              except FileNotFoundError:
                print("No file")
              data = json.load(notebook)
              notebook.close()
              markdown, code, language = jsonParce(data)
              changePoints(markdown)
              
            path = '${{steps.check_path.outputs.path}}'
            if path and '${{steps.checkdeadline.outputs.check_deadline}}' == '1':
              start_analyzing(path)
            else:
              print(f'::set-output name=check_report::0')
            END
      - name: Approve/Request changes pull request
        uses: andrewmusgrave/automatic-pull-request-review@0.0.2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          event: ${{ steps.changePoints.outputs.check_report == 1 && steps.check_path.outputs.check_file == 1 && steps.checkdeadline.outputs.check_deadline == 1 && 'APPROVE' || 'REQUEST_CHANGES' }}
          body: "## Автоматическая проверка. \\n **Результат**: ${{ steps.changePoints.outputs.check_report == 1 && 'Проверка пройдена!' || 'Проверка не пройдена.' }} \\n *Детали*: ${{ steps.check_path.outputs.check_file == 1 && steps.checkdeadline.outputs.check_deadline == 1 && steps.changePoints.outputs.check_rep_error || steps.check_path.outputs.check_file_error || steps.checkdeadline.outputs.check_deadline_error}}"
